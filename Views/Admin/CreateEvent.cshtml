@model List<LAB_FINAL_ACT.Models.Event>
@using System.Linq
@{
    Layout = null;
}

<!DOCTYPE html>
<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>EventZen</title>
    <style>
        body {
            margin: 0;
            padding: 0;
            font-family: Arial, sans-serif;
        }

        .container {
            display: flex;
            min-height: 100vh;
        }

        .sidebar {
            width: 250px;
            background-color: #1B2A4A;
            color: white;
            padding: 20px;
        }

        .logo {
            padding: 20px 0;
            border-bottom: 1px solid rgba(255, 255, 255, 0.2);
            margin-bottom: 20px;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .logo img {
            width: 32px;
            height: 32px;
            object-fit: contain;
        }

        .logo-text {
            color: white;
            font-size: 22px;
            font-weight: 500;
            letter-spacing: 0.5px;
            margin-left: 4px;
        }

        nav ul {
            list-style: none;
            padding: 0;
            margin: 20px 0;
        }

        nav ul li {
            padding: 10px 15px;
            margin: 5px 0;
            cursor: pointer;
        }

        nav ul li.active {
            border-radius: 5px;
        }

        nav ul li ul {
            margin: 10px 0 0 20px;
        }

        .main-content {
            flex: 1;
            background-color: #F5F6FA;
            padding: 30px;
        }

        .header {
            margin-bottom: 30px;
        }

        .header h1 {
            color: #333;
            font-size: 24px;
            font-weight: normal;
        }

        .username {
            color: #2196F3;
        }

        .event-card {
            background: white;
            border-radius: 10px;
            padding: 30px;
            margin: 20px 0;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        .add-event-button {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            color: #2196F3;
            cursor: pointer;
        }

        .events-list table {
            width: 100%;
            border-collapse: collapse;
            background: white;
            border-radius: 10px;
            overflow: hidden;
        }

        .events-list th {
            background-color: #F8F9FA;
            padding: 15px;
            text-align: left;
            color: #666;
            font-weight: normal;
            border-bottom: 1px solid #eee;
        }

        .events-list td {
            padding: 15px;
            border-bottom: 1px solid #eee;
            color: #333;
        }

        .events-list tr:hover {
            background-color: #F8F9FA;
        }

        .icon-edit, .icon-delete {
            margin: 0 5px;
            cursor: pointer;
            color: #666;
        }

        .search-bar {
            float: right;
            margin-top: -40px;
        }

        .search-bar input {
            padding: 8px 15px;
            border: 1px solid #ddd;
            border-radius: 5px;
            width: 200px;
        }

        /* Icon styles using emoji as placeholders */
        .icon-overview:before { content: "📊"; }
        .icon-events:before { content: "📅"; }
        .icon-create:before { content: "➕"; }
        .icon-list:before { content: "📋"; }
        .icon-settings:before { content: "⚙️"; }
        .icon-logout:before { content: "🚪"; }
        .icon-plus:before { content: "➕"; }
        .icon-edit:before { content: "🖋️"; }
        .icon-delete:before { content: "🗑️"; }

        /* Modal styles */
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            z-index: 1000;
        }

        .modal-content {
            position: relative;
            background-color: white;
            margin: 50px auto;
            padding: 30px;
            width: 500px;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        }

        .modal h2 {
            margin: 0 0 30px 0;
            font-size: 24px;
        }

        .form-group {
            margin-bottom: 20px;
        }

        .form-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: 500;
        }

        .form-group input {
            width: 100%;
            padding: 8px;
            border: 1px solid #ddd;
            border-radius: 4px;
            background-color: #f5f5f5;
        }

        .date-inputs {
            display: flex;
            gap: 10px;
        }

        .date-inputs select {
            padding: 8px;
            border: 1px solid #ddd;
            border-radius: 4px;
            background-color: #f5f5f5;
        }

        .date-inputs select:first-child {
            width: 70px; /* Day width */
        }

        .date-inputs select:nth-child(2) {
            width: 120px; /* Month width */
        }

        .date-inputs select:last-child {
            width: 90px; /* Year width */
        }

        .hours-input {
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .hours-input input {
            width: 150px;
        }

        .modal-buttons {
            display: flex;
            justify-content: flex-end;
            gap: 10px;
            margin-top: 30px;
        }

        .btn {
            padding: 8px 20px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 14px;
        }

        .btn-cancel {
            background-color: #f5f5f5;
            color: #333;
        }

        .btn-submit {
            background-color: #007bff;
            color: white;
        }

        .btn-delete {
            background-color: #dc3545;
            color: white;
        }

        #deleteConfirmModal .modal-content {
            max-width: 400px;
        }

        #deleteConfirmModal p {
            margin-bottom: 20px;
        }

        nav ul li a {
            display: flex;
            align-items: center;
            gap: 8px;
            padding: 5px 0;
            transition: color 0.3s ease;
        }

        nav ul li a:hover {
            color: #007bff !important;
        }

        nav ul li.active a {
            color: #007bff !important;
        }

        nav ul li i {
            margin-right: 8px;
        }
    </style>
</head>
<body>
    <div class="container">
        <!-- Left Sidebar -->
        <div class="sidebar">
            <div class="logo">
                <img src="~/Content/Images/logo.jpg" alt="EventZen Icon" />
                <span class="logo-text">EventZen</span>
            </div>
            
            <nav>
                <ul>
                    <li>
                        <a href="@Url.Action("Dashboard", "Admin")" style="text-decoration: none; color: white;">
                            <i class="icon-overview"></i> Overview
                        </a>
                    </li>
                    <li class="active">
                        <i class="icon-events"></i> Events
                        <ul>
                            <li>
                                <a href="@Url.Action("CreateEvent", "Admin")" style="text-decoration: none; color: white;">
                                    <i class="icon-create"></i> Create Event
                                </a>
                            </li>
                            <li>
                                <a href="@Url.Action("CreateEvent", "Admin")" style="text-decoration: none; color: white;">
                                    <i class="icon-list"></i> My Events
                                </a>
                            </li>
                        </ul>
                    </li>
                    <li>
                        <a href="@Url.Action("Logout", "Admin")" style="text-decoration: none; color: white;">
                            <i class="icon-logout"></i> Log out
                        </a>
                    </li>
                </ul>
            </nav>
        </div>

        <!-- Main Content -->
        <div class="main-content">
            <div class="header">
                <h1>Welcome, <span class="username">Sakyo</span></h1>
            </div>

            <h2>Create New Event</h2>

            <div class="event-card">
                <div class="add-event-button">
                    <i class="icon-plus"></i>
                    <p>Add New Event</p>
                </div>
            </div>

            <div class="events-list">
                <h2>My Events</h2>
                <table>
                    <thead>
                        <tr>
                            <th>#</th>
                            <th>Event Name</th>
                            <th>Location</th>
                            <th>Hours</th>
                            <th>Date</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (Model != null && Model.Any())
                        {
                            foreach (var evt in Model)
                            {
                                <tr>
                                    <td>@evt.BidetNumber</td>
                                    <td>@evt.EventName</td>
                                    <td>@evt.SetupLocation</td>
                                    <td>
                                        @DateTime.Today.Add(evt.OpeningHour).ToString("hh:mm tt") - 
                                        @DateTime.Today.Add(evt.ClosingHour).ToString("hh:mm tt")
                                    </td>
                                    <td>@evt.DateAdded.ToString("MM.dd.yyyy")</td>
                                    <td>
                                        <i class="icon-edit" data-id="@evt.EventID"></i>
                                        <i class="icon-delete" data-id="@evt.EventID"></i>
                                    </td>
                                </tr>
                            }
                        }
                        else
                        {
                            <tr>
                                <td colspan="6" style="text-align: center;">No events found</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <div id="createEventModal" class="modal">
        <div class="modal-content">
            <h2>Create New Event</h2>
            <form id="createEventForm">
                <div class="form-group">
                    <label>Bidet Number #:</label>
                    <input type="number" name="BidetNumber" />
                </div>

                <div class="form-group">
                    <label>Date Added:</label>
                    <div class="date-inputs">
                        <select id="day" name="Day">
                            @for (int i = 1; i <= 31; i++)
                            {
                                <option value="@i" @(i == 11 ? "selected" : "")>@(i.ToString("00"))</option>
                            }
                        </select>
                        <select id="month" name="Month">
                            @{
                                string[] months = { "January", "February", "March", "April", "May", "June", 
                                                  "July", "August", "September", "October", "November", "December" };
                                for (int i = 0; i < months.Length; i++)
                                {
                                    <option value="@(i + 1)" @(i == 10 ? "selected" : "")>@months[i]</option>
                                }
                            }
                        </select>
                        <select id="year" name="Year">
                            @for (int i = 2024; i <= 2030; i++)
                            {
                                <option value="@i" @(i == 2024 ? "selected" : "")>@i</option>
                            }
                        </select>
                    </div>
                </div>

                <div class="form-group">
                    <label>Event Name:</label>
                    <input type="text" name="EventName" />
                </div>

                <div class="form-group">
                    <label>Setup Location:</label>
                    <input type="text" name="SetupLocation" />
                </div>

                <div class="form-group">
                    <label>Set opening / closing hours:</label>
                    <div class="hours-input">
                        <input type="time" name="OpeningHour" step="1" />
                        <span>—</span>
                        <input type="time" name="ClosingHour" step="1" />
                    </div>
                </div>

                <div class="modal-buttons">
                    <button type="button" class="btn btn-cancel" onclick="closeModal()">Cancel</button>
                    <button type="submit" class="btn btn-submit">Submit</button>
                </div>
            </form>
        </div>
    </div>

    <!-- Delete Confirmation Modal -->
    <div id="deleteConfirmModal" class="modal">
        <div class="modal-content">
            <h2>Confirm Delete</h2>
            <p>Are you sure you want to delete this event?</p>
            <div class="modal-buttons">
                <button type="button" class="btn btn-cancel" onclick="closeDeleteModal()">No</button>
                <button type="button" class="btn btn-delete" onclick="confirmDelete()">Yes</button>
            </div>
        </div>
    </div>

    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script>
        const modal = document.getElementById('createEventModal');
        const modalTitle = modal.querySelector('h2');
        const form = document.getElementById('createEventForm');
        const submitButton = form.querySelector('button[type="submit"]');
        let isEditMode = false;
        let editingEventId = null;

        // Show modal for new event
        document.querySelector('.add-event-button').addEventListener('click', () => {
            isEditMode = false;
            editingEventId = null;
            modalTitle.textContent = 'Create New Event';
            submitButton.textContent = 'Submit';
            form.reset();
            modal.style.display = 'block';
        });

        // Show modal for edit
        document.querySelectorAll('.icon-edit').forEach(icon => {
            icon.addEventListener('click', async () => {
                isEditMode = true;
                editingEventId = icon.dataset.id;
                modalTitle.textContent = 'Update Event';
                submitButton.textContent = 'Update';

                // Get the row data
                const row = icon.closest('tr');
                const bidetNumber = row.cells[0].textContent;
                const eventName = row.cells[1].textContent;
                const location = row.cells[2].textContent;
                const dateStr = row.cells[4].textContent; // Format: MM.dd.yyyy

                // Parse the date correctly
                const [month, day, year] = dateStr.split('.');
                
                // Fill the form
                form.querySelector('input[name="BidetNumber"]').value = bidetNumber;
                form.querySelector('input[name="EventName"]').value = eventName;
                form.querySelector('input[name="SetupLocation"]').value = location;
                
                // Set date dropdowns with parsed values
                form.querySelector('select[name="Day"]').value = parseInt(day);
                form.querySelector('select[name="Month"]').value = parseInt(month);
                form.querySelector('select[name="Year"]').value = parseInt(year);

                // Get times from the row
                const timeStr = row.cells[3].textContent.split('-');
                form.querySelector('input[name="OpeningHour"]').value = convertTo24Hour(timeStr[0].trim());
                form.querySelector('input[name="ClosingHour"]').value = convertTo24Hour(timeStr[1].trim());

                modal.style.display = 'block';
            });
        });

        function convertTo24Hour(time12h) {
            const [time, modifier] = time12h.split(' ');
            let [hours, minutes] = time.split(':');
            
            hours = parseInt(hours);
            
            if (hours === 12) {
                hours = modifier === 'PM' ? 12 : 0;
            } else if (modifier === 'PM') {
                hours += 12;
            }
            
            return `${hours.toString().padStart(2, '0')}:${minutes}`;
        }

        // Form submit handler
        form.addEventListener('submit', function(e) {
            e.preventDefault();
            
            // Get the date components
            const year = document.querySelector('select[name="Year"]').value;
            const month = document.querySelector('select[name="Month"]').value.padStart(2, '0');
            const day = document.querySelector('select[name="Day"]').value.padStart(2, '0');
            
            // Format date as yyyy-MM-dd
            const formattedDate = `${year}-${month}-${day}`;
            
            const formData = {
                BidetNumber: document.querySelector('input[name="BidetNumber"]').value,
                DateAddedString: formattedDate,
                EventName: document.querySelector('input[name="EventName"]').value,
                SetupLocation: document.querySelector('input[name="SetupLocation"]').value,
                OpeningHourString: document.querySelector('input[name="OpeningHour"]').value,
                ClosingHourString: document.querySelector('input[name="ClosingHour"]').value
            };

            if (isEditMode) {
                formData.EventID = editingEventId;
            }

            // Send AJAX request
            $.ajax({
                url: isEditMode ? '@Url.Action("UpdateEvent", "Admin")' : '@Url.Action("CreateEvent", "Admin")',
                type: 'POST',
                data: formData,
                success: function(response) {
                    if (response.success) {
                        alert(response.message);
                        closeModal();
                        location.reload();
                    } else {
                        alert(response.message);
                    }
                },
                error: function() {
                    alert('An error occurred. Please try again.');
                }
            });
        });

        function closeModal() {
            modal.style.display = 'none';
            form.reset();
        }

        // Close modal when clicking outside
        window.onclick = function(event) {
            if (event.target == modal) {
                closeModal();
            }
        }

        let deleteEventId = null;
        const deleteModal = document.getElementById('deleteConfirmModal');

        // Show delete confirmation modal
        document.querySelectorAll('.icon-delete').forEach(icon => {
            icon.addEventListener('click', () => {
                deleteEventId = icon.dataset.id;
                deleteModal.style.display = 'block';
            });
        });

        function closeDeleteModal() {
            deleteModal.style.display = 'none';
            deleteEventId = null;
        }

        function confirmDelete() {
            if (deleteEventId) {
                // Send AJAX request to delete the event
                $.ajax({
                    url: '@Url.Action("DeleteEvent", "Admin")',
                    type: 'POST',
                    data: { id: deleteEventId },
                    success: function(response) {
                        if (response.success) {
                            alert(response.message);
                            location.reload();
                        } else {
                            alert(response.message);
                        }
                        closeDeleteModal();
                    },
                    error: function() {
                        alert('An error occurred while deleting the event.');
                        closeDeleteModal();
                    }
                });
            }
        }

        // Close delete modal when clicking outside
        window.onclick = function(event) {
            if (event.target == modal) {
                closeModal();
            }
            if (event.target == deleteModal) {
                closeDeleteModal();
            }
        }
    </script>
</body>
</html>
